package com.codesynd.ship

import android.graphics.Color
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.LatLng

class K {
    companion object {
        val lineColorConnected = Color.GREEN
        val lineColorDisconnected = Color.RED
        val pinHueConnected = BitmapDescriptorFactory.HUE_GREEN
        val pinHueDisconnected = BitmapDescriptorFactory.HUE_ORANGE
        val pinHueDisabled = BitmapDescriptorFactory.HUE_RED
        val pinHuePort = BitmapDescriptorFactory.HUE_BLUE

        val failureChance = 0.0
        val repairChance = 0.0

        val throughputPort = 10000.0
        val throughputAntenna = 1000.0

        val maxOwnTraffic = 5.0
        val nodeLatency = 12
        val redundancy = 1.0

        val clusters = 24
        val travelTimeHours = 8*24
        val connectionRangeMeters = 10*1600;
        val shipNames = listOf("Seafire", "Hawk", "Hornet",
            "Platypus", "Petunia", "Traveller",
            "Kestrel", "Cameron", "Nurton",
            "Tribune", "Leda", "Mediator",
            "Duff", "Pearl", "Medusa",
            "Gael", "Redpole", "Argo",
            "Helford", "Poseidon", "Cormorant",
            "Vixen", "Pursuer", "Duke")
        val rowOffsets = listOf(
            listOf<LatLng>(),
            listOf<LatLng>(LatLng(0.0, 0.0)),
            listOf<LatLng>(LatLng(0.01, 0.0), LatLng(-0.01, 0.0)),
            listOf<LatLng>(LatLng(0.015, 0.0), LatLng(0.0, 0.0), LatLng(-0.015, 0.0))
        )

        /*val departures = listOf<Pair<Double, Int>>(
            Pair(0.0000001,1),
            Pair(0.3,2),
            Pair(0.6,2),
            Pair(1.0, 2),
            Pair(1.3, 1),
            Pair(1.6, 3),
            Pair(2.0, 2),
            Pair(2.3, 3),
            Pair(2.6, 1),
            Pair(3.0, 2),
            Pair(3.3, 1),
            Pair(3.6, 1),
            Pair(4.0, 2),
            Pair(4.3, 1),
            Pair(4.6, 2),
            Pair(5.0, 3),
            Pair(5.3, 2),
            Pair(5.6, 2),
            Pair(6.0, 3),
            Pair(6.3, 2),
            Pair(6.6, 2),
            Pair(7.0, 2),
            Pair(7.3, 2),
            Pair(7.6, 2),
            Pair(8.0, 2),
            Pair(8.3, 3),
            Pair(8.6, 2),
            Pair(9.0, 3),
            Pair(9.3, 3),
            Pair(9.6, 3),
            Pair(10.0,3),
            Pair(10.3,3),
            Pair(10.6,3),
            Pair(11.0, 3),
            Pair(11.3, 2),
            Pair(11.6, 2),
            Pair(12.0, 2),
            Pair(12.3, 2),
            Pair(12.6, 2),
            Pair(13.0, 2),
            Pair(13.3, 2),
            Pair(13.6, 2),
            Pair(14.0, 3),
            Pair(14.3, 3),
            Pair(14.6, 2),
            Pair(15.0, 3),
            Pair(15.3, 2),
            Pair(15.6, 2),
            Pair(16.0, 3),
            Pair(16.3, 2),
            Pair(16.6, 2),
            Pair(17.0, 3),
            Pair(17.3, 3),
            Pair(17.6, 3),
            Pair(18.0, 3),
            Pair(18.3, 3),
            Pair(18.6, 3),
            Pair(19.0, 3),
            Pair(19.3, 3),
            Pair(19.6, 2),
            Pair(20.0, 3),
            Pair(20.3, 1),
            Pair(20.6, 2),
            Pair(21.0, 3),
            Pair(21.3, 2),
            Pair(21.6, 2),
            Pair(22.0, 3),
            Pair(22.3, 2),
            Pair(22.6, 1),
            Pair(23.0, 2),
            Pair(23.3, 1),
            Pair(23.6, 1)
        )*/
        val departures = listOf<Pair<Double, Int>>(
            Pair(0.0000001,1),
            Pair(0.3,2),
            Pair(0.6,2),
            Pair(1.0, 2),
            Pair(1.3, 1),
            Pair(1.6, 3),
            Pair(2.0, 2),
            Pair(2.3, 3),
            Pair(2.6, 1),
            Pair(3.0, 2),
            Pair(3.3, 1),
            Pair(3.6, 1),
            Pair(4.0, 2),
            Pair(4.3, 1),
            Pair(4.6, 2),
            Pair(5.0, 3),
            Pair(5.3, 2),
            Pair(5.6, 2),
            Pair(6.0, 1),
            Pair(6.3, 2),
            Pair(6.6, 2),
            Pair(7.0, 2),
            Pair(7.3, 2),
            Pair(7.6, 2),
            Pair(8.0, 2),
            Pair(8.3, 1),
            Pair(8.6, 2),
            Pair(9.0, 1),
            Pair(9.3, 1),
            Pair(9.6, 1),
            Pair(10.0,1),
            Pair(10.3,1),
            Pair(10.6,1),
            Pair(11.0, 1),
            Pair(11.3, 1),
            Pair(11.6, 2),
            Pair(12.0, 2),
            Pair(12.3, 2),
            Pair(12.6, 2),
            Pair(13.0, 2),
            Pair(13.3, 2),
            Pair(13.6, 2),
            Pair(14.0, 1),
            Pair(14.3, 1),
            Pair(14.6, 2),
            Pair(15.0, 1),
            Pair(15.3, 2),
            Pair(15.6, 2),
            Pair(16.0, 1),
            Pair(16.3, 1),
            Pair(16.6, 2),
            Pair(17.0, 1),
            Pair(17.3, 1),
            Pair(17.6, 1),
            Pair(18.0, 1),
            Pair(18.3, 1),
            Pair(18.6, 1),
            Pair(19.0, 1),
            Pair(19.3, 1),
            Pair(19.6, 2),
            Pair(20.0, 1),
            Pair(20.3, 1),
            Pair(20.6, 1),
            Pair(21.0, 1),
            Pair(21.3, 1),
            Pair(21.6, 1),
            Pair(22.0, 1),
            Pair(22.3, 1),
            Pair(22.6, 1),
            Pair(23.0, 1),
            Pair(23.3, 1),
            Pair(23.6, 1)
        )
        /*val departures = listOf<Pair<Double, Int>>(
            Pair(0.0000001,1),
            Pair(0.3,2),
            Pair(0.6,2),
            //Pair(1.0, 2),
            Pair(1.3, 1),
            Pair(1.6, 3),
            //Pair(2.0, 2),
            Pair(2.3, 3),
            Pair(2.6, 1),
            //Pair(3.0, 2),
            Pair(3.3, 1),
            Pair(3.6, 1),
            //Pair(4.0, 2),
            Pair(4.3, 1),
            Pair(4.6, 2),
            //Pair(5.0, 3),
            Pair(5.3, 2),
            Pair(5.6, 2),
            //Pair(6.0, 3),
            Pair(6.3, 2),
            Pair(6.6, 2),
            //Pair(7.0, 2),
            Pair(7.3, 2),
            Pair(7.6, 2),
            //Pair(8.0, 2),
            Pair(8.3, 3),
            Pair(8.6, 2),
            //Pair(9.0, 3),
            Pair(9.3, 3),
            Pair(9.6, 3),
            //Pair(10.0,3),
            Pair(10.3,3),
            Pair(10.6,3),
            //Pair(11.0, 3),
            Pair(11.3, 2),
            Pair(11.6, 2),
            //Pair(12.0, 2),
            Pair(12.3, 2),
            Pair(12.6, 2),
            //Pair(13.0, 2),
            Pair(13.3, 2),
            Pair(13.6, 2),
            //Pair(14.0, 3),
            Pair(14.3, 3),
            Pair(14.6, 2),
            //Pair(15.0, 3),
            Pair(15.3, 2),
            Pair(15.6, 2),
            //Pair(16.0, 3),
            Pair(16.3, 2),
            Pair(16.6, 2),
            //Pair(17.0, 3),
            Pair(17.3, 3),
            Pair(17.6, 3),
            //Pair(18.0, 3),
            Pair(18.3, 3),
            Pair(18.6, 3),
            //Pair(19.0, 3),
            Pair(19.3, 3),
            Pair(19.6, 2),
            //Pair(20.0, 3),
            Pair(20.3, 1),
            Pair(20.6, 2),
            //Pair(21.0, 3),
            Pair(21.3, 2),
            Pair(21.6, 2),
            //Pair(22.0, 3),
            Pair(22.3, 2),
            Pair(22.6, 1),
            //Pair(23.0, 2),
            Pair(23.3, 1),
            Pair(23.6, 1)
        )*/
    }
}